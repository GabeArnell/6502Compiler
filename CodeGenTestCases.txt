Gabriel Arnell Code Generation Test Cases

Test Cases
Test case code can be accessed on the dropdown on button: CG: [name]

Basic Output of Literals
Tests printing all basic data types.
Output: 0 7 hello world end

Complex expressions with literals pt 1-4
Tests comparisons(for all 3 data types) and addition print statements
Output pt. 1: true 3 6
Output pt. 2: false true false
Output pt. 3: true false
Output pt. 4: true true

Variable declaration with default values and output
Tests declaring variables and printing out the variables as default values
output: 0 false 

Basic variable assignment
Tests assigning simple literals to variables
output: 9 true hello world

Complex variable assignment with literals
Tests using addition and comparison statements in variable assignments
output: 9 true

Variables assigned with variables
Tests using variables as part of the experession in assignments
output: 6 9

Variable comparisons in complex expressions pt 1-3
Tests comparing variables to eachother in complex expressions (additions/comparisons)
Output pt. 1: 7 true false
Output pt. 2: true true false
Output pt. 2: false true

Variable declaration/assignment in scope
Uses variables with same symbol in different scopes to ensure the scope works
output: 4 3 2 1

Boolean If Statements
Tests if statements with simple true or false boolean 
output: if statement worked

Boolean expression if statements and nesting if statements pt.1-2
Tests nesting of if statements with variable useage and complex expressions (additions in comparison)
Output pt.1 :success
Output pt.2 :success two

While Statements
Tests a simple variable comparison in a while statement as variable counts up
output: 1 2 3 4 5 6 7 8 9

While true
Tests an infinite while loop counting a variable up 
output: 1 2 3 4 5 6 [and so on]

Nested while loops
counts from 1 to 81 with nested loops each going from 1-9
output: 1 2 3 4 [...] 80 81 ended

Boolean hell
Tests nested comparisons
Output: made it

Heap overflow
Ensures the compiler stops and gives error output when the heap is too big such that nothing else can be written
Output: code generation failed, no program is created

Stack overflow
Ensures compiler stops and gives error output when the code/stack is too long that the stack can no longer fit into the memory
Output: code generation failed, no program is created